#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q      &kp W         &kp E             &kp R               &kp T                                         &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D             &kp F               &kp G                                         &kp H        &kp J  &kp K      &kp L    &mt TAB SEMICOLON
&kp Z      &kp X         &kp C             &kp V               &kp B                                         &kp N        &kp M  &kp COMMA  &kp DOT  &mt CAPSLOCK SLASH
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &lt 2 LANG_HANGEUL  &lt 3 SPACE  &lt 5 LANGUAGE_2  &kp BACKSPACE  &lt 1 ENTER                             &mt RIGHT_SHIFT MINUS
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp N7        &kp N8        &kp N9        &kp PLUS      &kp MINUS                                   &kp LA(LG(LEFT_ARROW))  &kp LA(LG(RIGHT_ARROW))  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &kp LC(LA(UP_ARROW))
&kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &kp SLASH                                   &kp PAGE_UP             &mkp LCLK                &kp UP_ARROW          &mkp RCLK              &kp LC(LA(DOWN_ARROW))
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ENTER     &kp ENTER                                   &kp PAGE_DOWN           &kp LEFT_ARROW           &kp DOWN_ARROW        &kp RIGHT_ARROW        &kp LA(LC(LEFT_ARROW))
&kp N0        &kp N0        &kp PERIOD    &kp K_MUTE    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans  &trans                                                                                        &kp LC(LA(RIGHT_ARROW))
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION   &kp AT_SIGN   &kp HASH          &kp DOLLAR         &kp PERCENT                           &kp CARET      &kp AMPERSAND   &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp MINUS         &kp EQUAL     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SQT                               &kp PAGE_UP    &mkp LCLK       &kp UP_ARROW    &mkp RCLK             &mkp MCLK
&kp UNDER         &kp PLUS      &trans            &trans             &kp NON_US_BACKSLASH                  &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW       &mkp MB4
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &trans             &trans                &trans  &trans  &trans                                                               &mkp MB5
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4        &bl BL_ON                     &kp K_FIND      &kp C_AC_SEARCH   &kp HOME         &kp K_BACK  &kp K_FORWARD
&kp F5        &kp F6        &kp F7        &kp F8        &bl BL_OFF                    &kp K_MUTE      &kp C_VOL_DN      &kp C_VOLUME_UP  &none       &kp K_REFRESH
&kp F9        &kp F10       &kp F11       &kp F12       &bt BT_CLR                    &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT       &none       &none
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans                                                         &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&kp N1          &kp N2          &kp N3        &kp N4     &kp N5                  &kp N6         &kp N7     &kp N8  &kp N9     &kp N0
&kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none                   &kp PAGE_UP    &mkp LCLK  &none   &mkp RCLK  &mkp MCLK
&none           &none           &none         &none      &none                   &kp PAGE_DOWN  &none      &none   &none      &none
&none           &trans          &trans        &trans     &trans  &trans  &trans  &mo 3                                        &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };
    };
};
